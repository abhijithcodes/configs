-- Pull in the wezterm API
local wezterm = require 'wezterm'

-- for workspace keybindings
local act = wezterm.action
wezterm.on('update-right-status', function(window, pane)
  window:set_right_status(window:active_workspace())
end)

-- This will hold the configuration.
local config = wezterm.config_builder()

-- set cursor shape
config.default_cursor_style = "SteadyUnderline"

-- set font
config.font = wezterm.font ('Fira Code Retina', {weight="Regular"})

--set padding to zero
config.window_padding = {
  left = 0,
  right = 0,
  top = 0,
  bottom = 0,
}

-- This is where you actually apply your config choices

-- config.color_scheme = "Matrix (terminal.sexy)"
-- config.color_scheme = "matrix"
-- config.color_scheme = "Mellow Purple (base16)"
-- config.color_scheme = "Idle Toes (Gogh)"
-- config.color_scheme = "Hivacruz"
-- config.color_scheme = "hardhacker"
-- config.color_scheme = "midnight-in-mojave"
-- config.color_scheme = "MaterialDesignColors"
-- config.color_scheme = "Mikado (terminal.sexy)"
-- config.color_scheme = "Monokai Vivid"
-- config.color_scheme = "Humanoid dark (base16)"
-- config.color_scheme = "Kanagawa (Gogh)"
-- config.color_scheme = "Monokai Remastered"
-- config.color_scheme = "Flatland (Gogh)"
-- config.color_scheme = "Eqie6 (terminal.sexy)"
-- config.color_scheme = "Macintosh (base16)"
-- config.color_scheme = "Mathias"
config.color_scheme = "Homebrew"


-- Apply custom Wez color scheme
-- local scheme = wezterm.color.get_builtin_schemes()['Wez']

-- scheme.foreground = '#30ff00'
-- scheme.background = '#000000'
-- config.color_schemes = {
--   -- Override builtin wez color scheme
--   ['Wez'] = scheme,
-- }
-- config.color_scheme = "Wez"

-- set font size
-- this font size of 12 and line height of 1 wil minimise bottom padding
-- otherwise there is some bottom padding
-- okay changed to font_size 13 and line_height 0.9 which also works
-- font_size 14 and line_height 1.1 also works

-- config.font_size = 14
config.font_size = 12
config.line_height = 0.9

-- Spawn a fish shell in login mode
config.default_prog = { "pwsh","--NoProfile" }

-- disabling default keybindings
config.disable_default_key_bindings = true

-- Adding keybinding
config.leader = { key = 'Space', mods = 'CTRL' } --adding a leader key
config.keys = {
  -- leader configs
  { key = 'h',          mods = 'LEADER',     action = act.SplitHorizontal },
  { key = 'v',          mods = 'LEADER',     action = act.SplitVertical },
  { key = 'w',          mods = 'LEADER',     action = act.CloseCurrentTab { confirm = true } },
  { key = 'x',          mods = 'LEADER',     action = act.CloseCurrentPane { confirm = true } },
  { key = 't',          mods = 'LEADER',     action = act.SpawnTab("CurrentPaneDomain") },
  { key = 'r',          mods = 'LEADER',     action = act.ActivatePaneDirection("Right") },
  { key = 'l',          mods = 'LEADER',     action = act.ActivatePaneDirection("Left") },
  { key = 'u',          mods = 'LEADER',     action = act.ActivatePaneDirection("Up") },
  { key = 'd',          mods = 'LEADER',     action = act.ActivatePaneDirection("Down") },
  { key = 'p',          mods = 'LEADER',     action = act.ActivateTabRelative(-1) },
  { key = 'n',          mods = 'LEADER',     action = act.ActivateTabRelative(1) },

  -- other configs
  { key = 'p',          mods = 'CTRL|SHIFT', action = act.ActivateCommandPalette },
  { key = 'l',          mods = 'CTRL|ALT',   action = act.ShowDebugOverlay },
  { key = 'l',          mods = 'ALT',        action = act.ShowLauncher },
  { key = 'UpArrow',    mods = 'CTRL|SHIFT', action = act.AdjustPaneSize { "Up", 1 } },
  { key = 'DownArrow',  mods = 'CTRL|SHIFT', action = act.AdjustPaneSize { "Down", 1 } },
  { key = 'LeftArrow',  mods = 'CTRL|SHIFT', action = act.AdjustPaneSize { "Left", 1 } },
  { key = 'RightArrow', mods = 'CTRL|SHIFT', action = act.AdjustPaneSize { "Right", 1 } },
  { key = '=',          mods = 'CTRL',       action = act.IncreaseFontSize },
  { key = '-',          mods = 'CTRL',       action = act.DecreaseFontSize },
  { key = '0',          mods = 'CTRL',       action = act.ResetFontSize },
  { key = 'c',          mods = 'CTRL|SHIFT', action = act.CopyTo("Clipboard") },
  { key = 'v',          mods = 'CTRL|SHIFT', action = act.PasteFrom("Clipboard") },
  { key = 't', mods = 'CTRL', action = act.SpawnTab("CurrentPaneDomain") },
  { key = 'w', mods = 'CTRL', action = act.CloseCurrentTab {confirm=true}},
  { key = 'p', mods = 'CTRL', action = act.ActivateTabRelative(-1)},
  { key = 'n', mods = 'CTRL', action = act.ActivateTabRelative(1)},

  -- workspace configs
  {
    key = 'd',
    mods = 'ALT',
    action = act.SwitchToWorkspace {
      name = 'default',
    },
  },
  {
    key = 's',
    mods = 'ALT',
    action = act.ShowLauncherArgs {
      flags = 'FUZZY|WORKSPACES',
    },
  },
  -- Prompt for a name to use for a new workspace and switch to it.
  {
    key = 'n',
    mods = 'ALT',
    action = act.PromptInputLine {
      description = wezterm.format {
        { Attribute = { Intensity = 'Bold' } },
        { Foreground = { AnsiColor = 'Fuchsia' } },
        { Text = 'Enter name for new workspace' },
      },
      action = wezterm.action_callback(function(window, pane, line)
        -- line will be `nil` if they hit escape without entering anything
        -- An empty string if they just hit enter
        -- Or the actual line of text they wrote
        if line then
          window:perform_action(
            act.SwitchToWorkspace {
              name = line,
            },
            pane
          )
        end
      end),
    },
  },

  {
    key = 'F11',
    action = wezterm.action.ToggleFullScreen,
  },
  -- Switch to ubuntu workspace
  {
    key = 'u',
    mods = 'ALT',
    action = act.SwitchToWorkspace {
      name = 'ubuntu',
      spawn = {
        args = { 'ubuntu' }, -- top is a linux command(task manager), by default pwsh will be opened
      },
    },
  },
-- Clears the scrollback and viewport leaving the prompt line the new first line.
  {
    key = 'K',
    mods = 'CTRL|SHIFT',
    action = act.ClearScrollback 'ScrollbackAndViewport',
  },
  -- Create a new workspace with a random name and switch to it
  -- { key = 'i', mods = 'CTRL|SHIFT', action = act.SwitchToWorkspace },
  -- Show the launcher in fuzzy selection mode and have it list all workspaces
  -- and allow activating one.
}
config.mouse_bindings = {
  -- Disable the default click behavior
  {
    event = { Up = { streak = 1, button = "Left" } },
    mods = "NONE",
    action = wezterm.action.DisableDefaultAssignment,
  },
  -- Ctrl-click will open the link under the mouse cursor
  {
    event = { Up = { streak = 1, button = "Left" } },
    mods = "CTRL",
    action = wezterm.action.OpenLinkAtMouseCursor,
  },
}

-- toggle maximise on startup
-- local mux = wezterm.mux
-- wezterm.on('gui-startup', function(pwsh)
--   local tab, pane, window = mux.spawn_window(pwsh or {})
--   window:gui_window():maximize()
-- end)
-- and finally, return the configuration to wezterm

-- function to handle zen mode plugin in neovim
wezterm.on('user-var-changed', function(window, pane, name, value)
    local overrides = window:get_config_overrides() or {}
    if name == "ZEN_MODE" then
        local incremental = value:find("+")
        local number_value = tonumber(value)
        if incremental ~= nil then
            while (number_value > 0) do
                window:perform_action(wezterm.action.IncreaseFontSize, pane)
                number_value = number_value - 1
            end
            overrides.enable_tab_bar = false
        elseif number_value < 0 then
            window:perform_action(wezterm.action.ResetFontSize, pane)
            overrides.font_size = nil
            overrides.enable_tab_bar = true
        else
            overrides.font_size = number_value
            overrides.enable_tab_bar = false
        end
    end
    window:set_config_overrides(overrides)
end)
--adding a scrollbar
config.enable_scroll_bar = true

return config

