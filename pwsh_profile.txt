Invoke-Expression (&starship init powershell)
Invoke-Expression (& { (zoxide init powershell | Out-String) })

function GoToWork {
    param (
        [string]$FolderName
    )
    
    # Define the base path
    $BasePath = "D:\vscodefolder"
    
    # Create the full path by combining the base path and provided folder name
    $FullPath = Join-Path -Path $BasePath -ChildPath $FolderName
    
    # Check if the directory exists
    if (Test-Path -Path $FullPath -PathType Container) {
        # Navigate to the directory
        Set-Location -Path $FullPath
    } else {
        Write-Host "Directory '$FolderName' not found in '$BasePath'."
    }
}

Set-Alias -Name gtw -Value GoToWork

function Remove-RecursiveForce {
    param (
        [string]$Path
    )
    
    # Use Remove-Item with -Recurse and -Force parameters
    try{
        # in case of eror don't suppress instead stop and go to catch
        Remove-Item -Path $Path -Recurse -Force -ErrorAction Stop
        Write-Host "'$Path' has been deleted"    
    }
    catch{
        # print the error message along with this usig $_
        Write-Host "Error: Unable to delete '$Path'`n$_"
    }
}

Set-Alias -Name rif -Value Remove-RecursiveForce


function GoUpOne {
    Set-Location -Path ..
}

Set-Alias -Name up -Value GoUpOne

function GoUpTwo {
    Set-Location -Path ../..
}

Set-Alias -Name up2 -Value GoUpTwo


function Git-AddCommit {
    param (
        [string]$Message
    )    
    
    # Add all files to the staging area
    git add .
    
    # Commit the changes with the provided message
    git commit -m $Message
}

Set-Alias -Name gimmit -Value Git-AddCommit

function Edit-Pwsh-Profile {
    $PwshProfilePath = Join-Path -Path "$HOME\Documents\PowerShell" -ChildPath "Profile.ps1"
    
    if (Test-Path -Path $PwshProfilePath) {
        hx $PwshProfilePath
    } else {
        Write-Host "Profile.ps1 not found in '$HOME\Documents\PowerShell'."
    }
}


Set-Alias -Name pwsh-profile -Value Edit-Pwsh-Profile

function Edit-Helix-Languages {
    $HelixLangPath = Join-Path -Path "$HOME\AppData\Roaming\helix" -ChildPath "languages.toml"
    if (Test-Path -Path $HelixLangPath) {
        hx $HelixLangPath
    } else {
        Write-Host "languages.toml not found in '$HOME\AppData\Roaming\helix'."
    }
}

Set-Alias -Name helix-lang -Value Edit-Helix-Languages 

function Gcc-Out-Flags {
    param([string]$FileName)

    # Extract just the file name without the path
    $CleanedFileName = Split-Path -Leaf $FileName
    
    # set the executable name using regex
    $ExecutableName = $CleanedFileName -replace '\..*', '.exe'
    
    # run the gpp command with some flags
    gcc -Wall -Wextra -g $CleanedFileName -o $ExecutableName
}

Set-Alias -Name gccout -Value Gcc-Out-Flags

function Gpp-Out-Flags {
    param([string]$FileName)

    # Extract just the file name without the path
    $CleanedFileName = Split-Path -Leaf $FileName
    
    # set the executable name using regex
    $ExecutableName = $CleanedFileName -replace '\..*', '.exe'
    
    # run the gpp command with some flags
    g++ -Wall -Wextra -g $CleanedFileName -o $ExecutableName
}

Set-Alias -Name g++out -Value Gpp-Out-Flags

function move-prog-book {
    param(
        [string]$fileName,
        [string]$directoryName
    )
    
     if (-not $fileName) {
        Write-Host "Please provide a filename."
        return
    }
    
    $rootDirectory = "D:\textbooks\programming"
    
    
     if (-not $directoryName) {
        $destinationPath = $rootDirectory
    } else {
        $destinationPath = Join-Path -Path $rootDirectory -ChildPath $directoryName
    }
    
    if (-not (Test-Path -Path $destinationPath)) {
        Write-Host "Destination Path '$destinationPath' is not valid."
        return
    }
    
    $filePath = Join-Path -Path $pwd -ChildPath $fileName

    if (Test-Path -Path $filePath) {
        Move-Item -Path $filePath -Destination $destinationPath
        Write-Host "File '$fileName' moved to '$destinationPath'"
    } else {
        Write-Host "File '$fileName' not found in the current directory."
    }
}

Set-Alias -Name mpg -Value move-prog-book

Set-Alias -Name vim -Value nvim

# to delete multiple directories in a folder
function Remove-DirectoriesForce {
    param (
        [int]$Count,
        [switch]$SortByName,
        [switch]$Descending
    )

    # Get the directories in the current directory
    if ($SortByName) {
        if ($Descending) {
            $directories = Get-ChildItem -Directory | Sort-Object -Property Name -Descending | Select-Object -First $Count
        }
        else {
            $directories = Get-ChildItem -Directory | Sort-Object -Property Name | Select-Object -First $Count
        }
    }
    else {
        if ($Descending) {
            $directories = Get-ChildItem -Directory | Sort-Object -Property LastWriteTime -Descending | Select-Object -First $Count
        }
        else {
            $directories = Get-ChildItem -Directory | Sort-Object -Property LastWriteTime | Select-Object -First $Count
        }
    }

    # Check if there are enough directories
    if ($directories.Count -lt $Count) {
        Write-Output "Not enough directories inside this directory"
        return
    }

    # Display the list of directories to be deleted
    Write-Output " > The following directories will be deleted:"
    $directories | ForEach-Object { $_.FullName }

    # Prompt for confirmation
    $confirm = Read-Host " > Do you want to proceed with deleting these directories? (Y/N)"
    if ($confirm -ne "Y" -and $confirm -ne "y") {
        Write-Output "Operation cancelled."
        return
    }

    # Loop through each directory and call Remove-RecursiveForce
    foreach ($dir in $directories) {
        Remove-RecursiveForce -Path $dir.FullName
    }
}

Set-Alias -Name rifn -Value Remove-DirectoriesForce

# to open files selected from fzf directly in helix
function fzf-hx {
    fzf --bind 'enter:execute(hx {})'
}
